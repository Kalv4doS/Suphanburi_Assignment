import networkx as nx
import matplotlib.pyplot as plt
from networkx.algorithms.approximation import traveling_salesman_problem

# 1Ô∏è‚É£ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ 20 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
def create_graph():
    G = nx.Graph()
    
    locations = {
        "Bueng Chawak": {"Wat Pa Lelai Worawihan": 30, "Dragon Descendants Museum": 25},
        "Wat Pa Lelai Worawihan": {"Sam Chuk Market": 20, "Banharn-Jamsai Tower": 15},
        "Sam Chuk Market": {"Dragon Descendants Museum": 15, "Wat Khao Dee Salak": 35},
        "Dragon Descendants Museum": {"Banharn-Jamsai Tower": 10, "Wat Phai Rong Wua": 40},
        "Banharn-Jamsai Tower": {"Thai Buffalo Conservation Village": 12},
        "Wat Khao Dee Salak": {"Phu Toei National Park": 50},
        "Phu Toei National Park": {"Kra Seaw Dam": 30},
        "Kra Seaw Dam": {"Wat Phai Rong Wua": 45},
        "Wat Phai Rong Wua": {"Thai Buffalo Conservation Village": 20},
        "Thai Buffalo Conservation Village": {"Wat Phra Non Chaksi Worawihan": 35},
        "Wat Phra Non Chaksi Worawihan": {"Weluwan Cave": 28},
        "Weluwan Cave": {"Orchid Conservation Center (Lady Slipper Orchid)": 40},
        "Orchid Conservation Center (Lady Slipper Orchid)": {"Thai Buffalo Conservation Village": 22},
        "Thai Buffalo Conservation Village": {"Suphan Buri National Museum": 18},
        "Suphan Buri National Museum": {"Saphan Khong Floating Market": 15},
        "Saphan Khong Floating Market": {"Phu Hang Nak Natural Stone Park": 25},
        "Phu Hang Nak Natural Stone Park": {"Wat Khao Phra Si Sanphet Ram": 20},
        "Wat Khao Phra Si Sanphet Ram": {"Bueng Rahan": 30},
        "Bueng Rahan": {"Hub Khao Wong Reservoir (Pang Oung Suphan)": 50, "Wat Thap Kradan":15 },
    }

    for place, connections in locations.items():
        for dest, distance in connections.items():
            G.add_edge(place, dest, weight=distance)
    
    return G

# 2Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
def add_location(G):
    new_place = input("‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà: ").strip()
    if new_place in G.nodes:
        print("‚ùå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!")
        return
    
    G.add_node(new_place)
    print("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ\n‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà...")
    
    while True:
        connect_to = input("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö (‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î): ").strip()
        if not connect_to:
            break
        if connect_to not in G.nodes:
            print("‚ùå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£!")
            continue
        distance = int(input(f"‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å {new_place} ‡πÑ‡∏õ {connect_to} (‡∏Å‡∏°.): "))
        G.add_edge(new_place, connect_to, weight=distance)
    
    print("üìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

# 3Ô∏è‚É£ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏Æ‡πÑ‡∏•‡∏ï‡πå‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
def plot_graph(G, best_route):
    pos = nx.spring_layout(G, seed=42)
    labels = nx.get_edge_attributes(G, 'weight')

    plt.figure(figsize=(12, 8))
    nx.draw(G, pos, with_labels=True, node_size=2000, node_color='lightblue', font_size=9, edge_color='gray')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels, font_size=8)

    best_edges = [(best_route[i], best_route[i+1]) for i in range(len(best_route)-1)]
    nx.draw_networkx_edges(G, pos, edgelist=best_edges, edge_color='red', width=2)

    plt.title("‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ")
    plt.show()

# 4Ô∏è‚É£ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ TSP
def find_best_route(G, selected_places):
    subgraph = G.subgraph(selected_places)
    best_route = traveling_salesman_problem(subgraph, cycle=True, weight="weight")
    total_distance = sum(G[best_route[i]][best_route[i+1]]['weight'] for i in range(len(best_route)-1))
    return best_route, total_distance

# 5Ô∏è‚É£ ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
def main():
    G = create_graph()

    while True:
        print("\nüìç ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:")
        places_list = list(G.nodes)
        for i, place in enumerate(places_list, 1):
            print(f"{i}. {place}")

        print("\nüõ† ‡πÄ‡∏°‡∏ô‡∏π:")
        print("1Ô∏è‚É£ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á")
        print("2Ô∏è‚É£ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà")
        print("3Ô∏è‚É£ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
        choice = input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π (1-3): ").strip()

        if choice == "1":
            selected_indexes = input("\nüõ§ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á)\nüëâ: ").strip().split()
            
            selected_places = []
            for i in selected_indexes:
                if i.isdigit():
                    idx = int(i) - 1
                    if 0 <= idx < len(places_list):
                        selected_places.append(places_list[idx])
                    else:
                        print(f"‚ùå ‡πÄ‡∏•‡∏Ç {i} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£!")
                else:
                    print(f"‚ùå '{i}' ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")
            
            if len(selected_places) < 2:
                print("‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà!")
                continue
            
            best_route, total_distance = find_best_route(G, selected_places)
            print(f"\n‚úÖ ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: {' ‚Üí '.join(best_route)}")
            print(f"üìè ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏ß‡∏°: {total_distance} ‡∏Å‡∏°.")
            plot_graph(G, best_route)

        elif choice == "2":
            add_location(G)
        elif choice == "3":
            print(" ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...")
            break
        else:
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!")

# ‚ñ∂Ô∏è ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
if __name__ == "__main__":
    main()
